// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.Models;

#nullable disable

namespace School.Migrations
{
    [DbContext(typeof(StudentsContext))]
    partial class StudentsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("School.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ADDRESS_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("ADDRESS_LINE_1");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("ADDRESS_LINE_2");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ADDRESS_TYPE_ID");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CITY");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATE");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("STUDENT_ID");

                    b.Property<string>("Zip")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("ZIP");

                    b.HasKey("AddressId")
                        .HasName("PK_Student.Addres");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("School.Models.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ADDRESS_TYPE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressTypeId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AddressTypeId")
                        .HasName("PK_Student.Address");

                    b.ToTable("AddressType", (string)null);
                });

            modelBuilder.Entity("School.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CITY_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("CityId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("School.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("COUNTRY_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("CountryId");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("School.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("COURSE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("Cource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COURCE");

                    b.Property<double?>("CourceFee")
                        .HasColumnType("float")
                        .HasColumnName("COURCE_FEE");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.HasKey("CourseId")
                        .HasName("PK_StudentCourse");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("School.Models.Email", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EMAIL_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("Email1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("STUDENT_ID");

                    b.HasKey("EmailId")
                        .HasName("PK_Student.Email");

                    b.HasIndex("StudentId");

                    b.ToTable("Email", (string)null);
                });

            modelBuilder.Entity("School.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EMPLOYEE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CITY_ID");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("COUNTRY_ID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EMPLOYEE_TYPE_ID");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAME");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("PHONE")
                        .IsFixedLength();

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("STATE_ID");

                    b.HasKey("EmployeeId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("School.Models.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EMPLOYEE_TYPE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeTypeId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("EmployeeType", (string)null);
                });

            modelBuilder.Entity("School.Models.GaurdianPhone", b =>
                {
                    b.Property<int>("GuardianPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GUARDIAN_PHONE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuardianPhoneId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<int?>("GuardianId")
                        .HasColumnType("int")
                        .HasColumnName("GUARDIAN_ID");

                    b.Property<string>("GuardianPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("GUARDIAN_PHONE");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.HasKey("GuardianPhoneId")
                        .HasName("PK_Student.Gaurdian.phone");

                    b.HasIndex("GuardianId");

                    b.ToTable("GaurdianPhone", (string)null);
                });

            modelBuilder.Entity("School.Models.GaurdianType", b =>
                {
                    b.Property<int>("GuardianTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GUARDIAN_TYPE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuardianTypeId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("GuardianType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GUARDIAN_TYPE");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("GuardianTypeId")
                        .HasName("PK_GUARDIAN_TYPE");

                    b.ToTable("GaurdianType", (string)null);
                });

            modelBuilder.Entity("School.Models.NoticeBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("NoticeBody")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("NOTICE_BODY");

                    b.HasKey("Id");

                    b.ToTable("NoticeBoard", (string)null);
                });

            modelBuilder.Entity("School.Models.Phone", b =>
                {
                    b.Property<int>("PhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PHONE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("PHONE_NUMBER")
                        .IsFixedLength();

                    b.Property<int>("PhoneTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PHONE_TYPE_ID");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("STUDENT_ID");

                    b.HasKey("PhoneId")
                        .HasName("PK_STUDENT.PHONE");

                    b.HasIndex("PhoneTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Phone", (string)null);
                });

            modelBuilder.Entity("School.Models.PhoneType", b =>
                {
                    b.Property<int>("PhoneTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PHONE_TYPE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneTypeId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("PhoneTypeId")
                        .HasName("PK_Student.PhoneType");

                    b.ToTable("PhoneType", (string)null);
                });

            modelBuilder.Entity("School.Models.Rolemaster", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("RoleId");

                    b.ToTable("Rolemaster", (string)null);
                });

            modelBuilder.Entity("School.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("STATE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("StateId");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("School.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("STUDENT_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ADMISSION_DATE");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CITY_ID");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CLASS");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("COUNTRY_ID");

                    b.Property<int?>("CourceId")
                        .HasColumnType("int")
                        .HasColumnName("COURCE_ID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("DOB");

                    b.Property<bool?>("FeePayment")
                        .HasColumnType("bit")
                        .HasColumnName("FEE_PAYMENT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("MODIFIED_BY")
                        .IsFixedLength();

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("NAME");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("STATE_ID");

                    b.HasKey("StudentId")
                        .HasName("PK__STUDENT__3214EC27E44F38F8");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CourceId");

                    b.HasIndex("StateId");

                    b.ToTable("Student", null, t =>
                        {
                            t.HasTrigger("StudentAuditTrigger");
                        });
                });

            modelBuilder.Entity("School.Models.StudentAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("NewCityId")
                        .HasColumnType("int")
                        .HasColumnName("NewCityID");

                    b.Property<string>("NewClass")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("NewCountryId")
                        .HasColumnType("int")
                        .HasColumnName("NewCountryID");

                    b.Property<DateTime?>("NewDob")
                        .HasColumnType("datetime")
                        .HasColumnName("NewDOB");

                    b.Property<string>("NewName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("NewStateId")
                        .HasColumnType("int")
                        .HasColumnName("NewStateID");

                    b.Property<int?>("OldCityId")
                        .HasColumnType("int")
                        .HasColumnName("OldCityID");

                    b.Property<string>("OldClass")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("OldCountryId")
                        .HasColumnType("int")
                        .HasColumnName("OldCountryID");

                    b.Property<DateTime?>("OldDob")
                        .HasColumnType("datetime")
                        .HasColumnName("OldDOB");

                    b.Property<string>("OldName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OldStateId")
                        .HasColumnType("int")
                        .HasColumnName("OldStateID");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("AuditId")
                        .HasName("PK__StudentA__A17F23B8E1BCF4A4");

                    b.ToTable("StudentAudit", (string)null);
                });

            modelBuilder.Entity("School.Models.StudentAuditView", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AuditID");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("NewCityId")
                        .HasColumnType("int")
                        .HasColumnName("NewCityID");

                    b.Property<string>("NewClass")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("NewCountryId")
                        .HasColumnType("int")
                        .HasColumnName("NewCountryID");

                    b.Property<DateTime?>("NewDob")
                        .HasColumnType("datetime")
                        .HasColumnName("NewDOB");

                    b.Property<string>("NewName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("NewStateId")
                        .HasColumnType("int")
                        .HasColumnName("NewStateID");

                    b.Property<int?>("OldCityId")
                        .HasColumnType("int")
                        .HasColumnName("OldCityID");

                    b.Property<string>("OldClass")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("OldCountryId")
                        .HasColumnType("int")
                        .HasColumnName("OldCountryID");

                    b.Property<DateTime?>("OldDob")
                        .HasColumnType("datetime")
                        .HasColumnName("OldDOB");

                    b.Property<string>("OldName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OldStateId")
                        .HasColumnType("int")
                        .HasColumnName("OldStateID");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.ToTable((string)null);

                    b.ToView("StudentAuditView", (string)null);
                });

            modelBuilder.Entity("School.Models.StudentGuardian", b =>
                {
                    b.Property<int>("GuardianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GUARDIAN_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuardianId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("GuardianName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GUARDIAN_NAME");

                    b.Property<int>("GuardianTypeId")
                        .HasColumnType("int")
                        .HasColumnName("GUARDIAN_TYPE_ID");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("STUDENT_ID");

                    b.HasKey("GuardianId")
                        .HasName("PK_Student.Guardian");

                    b.HasIndex("GuardianTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentGuardian", (string)null);
                });

            modelBuilder.Entity("School.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SUBJECT_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<int?>("CourceId")
                        .HasColumnType("int")
                        .HasColumnName("COURCE_ID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_ON");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_ON");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("SubjectId")
                        .HasName("PK_Student.Subject");

                    b.HasIndex("CourceId");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("School.Models.UserMaster", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uid"));

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Uid")
                        .HasName("PK__UserMast__C5B69A4AC27E60E9");

                    b.HasIndex("Role");

                    b.ToTable("UserMaster", (string)null);
                });

            modelBuilder.Entity("School.Models.Address", b =>
                {
                    b.HasOne("School.Models.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_AddressType");

                    b.HasOne("School.Models.Employee", "Employee")
                        .WithMany("Addresses")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Address_Employee");

                    b.HasOne("School.Models.Student", "Student")
                        .WithMany("Addresses")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Address_Student");

                    b.Navigation("AddressType");

                    b.Navigation("Employee");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("School.Models.Email", b =>
                {
                    b.HasOne("School.Models.Student", "Student")
                        .WithMany("Emails")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Email_Student");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("School.Models.Employee", b =>
                {
                    b.HasOne("School.Models.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Employee_City");

                    b.HasOne("School.Models.Country", "Country")
                        .WithMany("Employees")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Employee_Country");

                    b.HasOne("School.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_EmployeeType");

                    b.HasOne("School.Models.State", "State")
                        .WithMany("Employees")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Employee_State");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("EmployeeType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("School.Models.GaurdianPhone", b =>
                {
                    b.HasOne("School.Models.StudentGuardian", "Guardian")
                        .WithMany("GaurdianPhones")
                        .HasForeignKey("GuardianId")
                        .HasConstraintName("FK_GaurdianPhone_StudentGuardian");

                    b.Navigation("Guardian");
                });

            modelBuilder.Entity("School.Models.Phone", b =>
                {
                    b.HasOne("School.Models.PhoneType", "PhoneType")
                        .WithMany("Phones")
                        .HasForeignKey("PhoneTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Phone_PhoneType1");

                    b.HasOne("School.Models.Student", "Student")
                        .WithMany("Phones")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Phone_Student");

                    b.Navigation("PhoneType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("School.Models.Student", b =>
                {
                    b.HasOne("School.Models.City", "City")
                        .WithMany("Students")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Student_City");

                    b.HasOne("School.Models.Country", "Country")
                        .WithMany("Students")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Student_Country");

                    b.HasOne("School.Models.Course", "Cource")
                        .WithMany("Students")
                        .HasForeignKey("CourceId")
                        .HasConstraintName("FK_Student_Course");

                    b.HasOne("School.Models.State", "State")
                        .WithMany("Students")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Student_State");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Cource");

                    b.Navigation("State");
                });

            modelBuilder.Entity("School.Models.StudentGuardian", b =>
                {
                    b.HasOne("School.Models.GaurdianType", "GuardianType")
                        .WithMany("StudentGuardians")
                        .HasForeignKey("GuardianTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentGuardian_GaurdianType");

                    b.HasOne("School.Models.Student", "Student")
                        .WithMany("StudentGuardians")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentGuardian_Student");

                    b.Navigation("GuardianType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("School.Models.Subject", b =>
                {
                    b.HasOne("School.Models.Course", "Cource")
                        .WithMany("Subjects")
                        .HasForeignKey("CourceId")
                        .HasConstraintName("FK_Subject_Course");

                    b.Navigation("Cource");
                });

            modelBuilder.Entity("School.Models.UserMaster", b =>
                {
                    b.HasOne("School.Models.Rolemaster", "RoleNavigation")
                        .WithMany("UserMasters")
                        .HasForeignKey("Role")
                        .HasConstraintName("FK__UserMaster__Role__6497E884");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("School.Models.AddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("School.Models.City", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("School.Models.Country", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("School.Models.Course", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("School.Models.Employee", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("School.Models.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("School.Models.GaurdianType", b =>
                {
                    b.Navigation("StudentGuardians");
                });

            modelBuilder.Entity("School.Models.PhoneType", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("School.Models.Rolemaster", b =>
                {
                    b.Navigation("UserMasters");
                });

            modelBuilder.Entity("School.Models.State", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("School.Models.Student", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Emails");

                    b.Navigation("Phones");

                    b.Navigation("StudentGuardians");
                });

            modelBuilder.Entity("School.Models.StudentGuardian", b =>
                {
                    b.Navigation("GaurdianPhones");
                });
#pragma warning restore 612, 618
        }
    }
}
